for i in range(5):
    for a in range(10):
        print
        print i
        print a
        print

#----Test Cases---
print
print 
print
print
b = 10 / 3               # b is a variable of double datatype
a = 10 + b - 3        # a is a variable of Integer datatype
c = 2.5               # c is a variable of Double datatype
d = 10.5 + c - 3.3    # d is a variable of Double datatype

a = 10      # a is an Integer
b = 2.5 + a  # b is a Double
c = a * b       # c is a Double

b = "Hello"
helloWorld = b + " " + "World"

#printing time
b = "bipin"+ "regmi"
print b #B is printed
w = "Welcome!"
print w, b

a = -1 + -3
b = 1.5 * -2 + 8
print "a=",a,"b=",b,"and the sum is",a+b #This prints a+b

a = 10 < 15
b = "b" == "c"
c = "b" < "z"
d = 20.12 < 20.2
e = 20.12 + 2 + 3 /1.2
f = 3 + (20.12 *  3)
b= 1.25 % 0.25
#Done.......

print "--------------------------------DONE WITH THE FIRST PART--------------------------------------------------"

#Thank you...

a = 1 // 2
b = 2.0 // 3
c = 1 > 2
d = 2 < 1
e = 2 >= 3
f = 8 <= 10
g = 0 == 1
h = 1 != 1
i = 2 + 1
j = 3 - 4
k = 4 * 12
l = (-10 * 8 + 4)
m = 10 / 5
n = 10 / 6
o = 12 == 12 == 12
p = 12 == 12 == 1
for ab in range(10):
    for c in range(7):
        q = c - 1
    print "this is not right"
    print q
    q = q + 2
    xyz = 123


q = "omg" + "There is something here !@#$%^&*())"
#r = ";laksf" - "there"
s = "Repeat !" * 4

a = 5
for i in range(5):
    for b in range(a-i):
        print b
    for c in range(a-(a-i)):
        print a

a = 4 * 2 * 5 * 3 * 10 - 40
print a
sum_i = 0
sum_j = 0
for i in range(10):
    print i 
    sum_i = sum_i + i
    for j in range( 10 ):
        sum_j = sum_j + j 
        print j
print sum_i
print sum_j

print "--------------------------------------------------DONE WITH THE SECOND PART----------------------------------------"

print "This is c before the function: ", c
def first_function(a, b, random, something):
    print a
    print b
    print random
    print something
    b = a * random - something
    print b
    c = 123
    print "This is c within the function: ", c
first_function(10, 20,30, 40)
print "This is c outside the function: ", c, " They should not be the same"

def second_function():
    def fourth_function(): 
        print "Inside the fourth function"
    fourth_function()

second_function()

def fifth_function():
    return 0
    #this does literatlly nothing 

fifth_function()

def Sixth_function(x, y, z):
    for i in range(10):
        x = x * z
        for j in range(10):
            x = x * y
    print x


# Factorial of a number using recursion

def recur_factorial(n):
   if n == 1:
       return n
   else:#recursion happens here
       return n*recur_factorial(n-1)
       #done with recursion

num = 7

# check if the number is negative
if num < 0:
   print("Sorry, factorial does not exist for negative numbers")
elif num == 0:
   print("The factorial of 0 is 1")
else:
   print("The factorial of", num, "is", recur_factorial(num))


def f3(x,y):
    print ("In f3")
    a = x + y
    print ("a = x + y::",a)
    return a
def f2():
    print ("In f2()")
    a = 10
    b = 15
    print ("a and b assigned!")
    f3(a,b)
    print ("First call made","a",a,"b",b)
    print ("Returned",f3(a,b),"from f3")
def f1(a,b):
    print("In f1(a,b):")
    x = a - b
    print (x)
    f2()
    print ("x = a - b::",x)
def fx(h,i,j,k):
    h = h*h
    print (h,i,j,k)
    f1(100 , 200)
a = 10
b = 21
c = 19
d = 95
fx(a,b,c,d)
e = "After call"
print (a,b,c,d)
print ("Done")


# Here x is a new reference to same list lst
def myFun(x):
   print ("Function called with x = ",x)
   x[0] = 20
   print (x[0])


ast = [10, 11, 12, 13, 14, 15]
print (ast)
myFun(ast)
print(ast)

print "------------------------DONE WITH THE THIRD PART--------------------------------------------"

def function_eight(a, b, c): 
    def function_nine(x, y, z):
        def tenth(i):
            print i
        tenth("THIS IS TEN")
        print "This is nine: ", x * y * z
    function_nine(3,4,5)
    print "This is the eight: ", a - b - c
function_eight(10,5,2)

z = -5
print z
print ( -5 )